###
# Forms
###

# reference:
https://docs.djangoproject.com/en/1.11/ref/forms/fields/#module-django.forms.fields

https://docs.djangoproject.com/en/1.11/topics/forms/#form-rendering-options
https://docs.djangoproject.com/en/1.8/ref/csrf/#module-django.middleware.csrf

* Generic Forms
* Modular Forms

####
# Contact Form
####

1) Create the forms.py in your blog/forms.py

from django import forms

class ContactForm(forms.Form):
	contact_name = forms.CharField(max_length=20,required=True)
	contact_email = forms.EmailField(required=True)
	content = forms.CharField(
		widget = forms.Textarea
		)

references:
https://docs.djangoproject.com/en/1.11/ref/forms/widgets/
https://docs.djangoproject.com/en/1.11/ref/forms/fields/#
https://docs.djangoproject.com/en/1.11/topics/forms/#working-with-forms

2) we are going to create a url for forms.py

##To seperate the app relative urls from the project.

* create a seperate urls.py in the blog app.
* also create a link to the url in the mysite/urls.py


- src/mysite/urls.py

from django.conf.urls import include, url
from django.contrib import admin

urlpatterns = [
    # Examples:
    # url(r'^$', 'mysite.views.home', name='home'),
    # url(r'^blog/', include('blog.urls')),

    url(r'^admin/', include(admin.site.urls)),
    url(r'^$','blog.views.hello_world',name='hello_world'),
    url(r'^blog/', include('blog.urls')),
]

- /src/blog/urls.py

from django.conf.urls import include, url
from .views import ContactView

urlpatterns = [
    # Examples:
    # url(r'^$', 'mysite.views.home', name='home'),
    # url(r'^blog/', include('blog.urls')),

    url(r'^$','blog.views.myblog',name='myblog'),
    url(r'^contact/',ContactView,name='contact')
]

3) create a view for the forms.py

def ContactView(request):

	# GET
	contact_form = ContactForm  # class not a instance.
	context = {'form':contact_form}
	return render(request,'blog/ContactForm.html',context)

4) Lets create the contact page - cc

<html>
<head>
<title>  Please Join us</title>
</head>
<form role='form' action='' method='post'>
{{ form.as_p }}
<button type="submit">submit</button>
</form>
</html>

Reference:
https://docs.djangoproject.com/en/1.11/topics/forms/#form-rendering-options


5) hit the http://localhost:8000/blog/contact url.

* you should get a form page.
* when you hit on the submit button, you should get the following error below.

-------------------------------------------------------------------------------------
Forbidden (403)

CSRF verification failed. Request aborted.
Help

Reason given for failure:

    CSRF token missing or incorrect.
    

In general, this can occur when there is a genuine Cross Site Request Forgery, or when Django's CSRF mechanism has not been used correctly. For POST forms, you need to ensure:

    Your browser is accepting cookies.
    The view function passes a request to the template's render method.
    In the template, there is a {% csrf_token %} template tag inside each POST form that targets an internal URL.
    If you are not using CsrfViewMiddleware, then you must use csrf_protect on any views that use the csrf_token template tag, as well as those that accept the POST data.

You're seeing the help section of this page because you have DEBUG = True in your Django settings file. Change that to False, and only the initial error message will be displayed.

You can customize this page using the CSRF_FAILURE_VIEW setting.
------------------------------------------------------------------------------------------


6) we can add the {% csrf_token %} token in the - src/blog/templates/blog/ContactForm.html

<html>
<head>
<title>  Please Join us</title>
</head>
<form role='form' action='' method='post'>
{% csrf_token %}
{{ form.as_p }}
<button type="submit">submit</button>
</form>
</html>


* http://localhost:8000/blog/contact now open the url.
* hit on the submit button you should not see the csrf token error any more. 

reference: https://docs.djangoproject.com/en/1.8/ref/csrf/#module-django.middleware.csrf
